// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: assignments.sql

package db

import (
	"context"
	"time"
)

const createAssignment = `-- name: CreateAssignment :one
INSERT INTO "assignments" ("course", "name", "reviews_per_submission", "time_due") 
    VALUES ($1, $2, $3, $4) RETURNING "id"
`

type CreateAssignmentParams struct {
	Course               int32     `json:"course"`
	Name                 string    `json:"name"`
	ReviewsPerSubmission int32     `json:"reviews_per_submission"`
	TimeDue              time.Time `json:"time_due"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) (int32, error) {
	row := q.queryRow(ctx, q.createAssignmentStmt, createAssignment,
		arg.Course,
		arg.Name,
		arg.ReviewsPerSubmission,
		arg.TimeDue,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAssignment = `-- name: GetAssignment :one
SELECT id, name, course, reviews_per_submission, time_due, get_assignment_rating($1) AS rating
    FROM assignments
    WHERE id = $1
`

type GetAssignmentRow struct {
	ID                   int32     `json:"id"`
	Name                 string    `json:"name"`
	Course               int32     `json:"course"`
	ReviewsPerSubmission int32     `json:"reviews_per_submission"`
	TimeDue              time.Time `json:"time_due"`
	Rating               float64   `json:"rating"`
}

func (q *Queries) GetAssignment(ctx context.Context, id int32) (GetAssignmentRow, error) {
	row := q.queryRow(ctx, q.getAssignmentStmt, getAssignment, id)
	var i GetAssignmentRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Course,
		&i.ReviewsPerSubmission,
		&i.TimeDue,
		&i.Rating,
	)
	return i, err
}
