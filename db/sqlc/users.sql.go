// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "users" ("id", "display_name") VALUES ($1, $2)
`

type CreateUserParams struct {
	ID          string `json:"id"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.ID, arg.DisplayName)
	return err
}

const createUserCourseEnrollment = `-- name: CreateUserCourseEnrollment :exec
INSERT INTO "user_course_enrollments" ("user", "course") VALUES ($1, $2)
`

type CreateUserCourseEnrollmentParams struct {
	User   string `json:"user"`
	Course int32  `json:"course"`
}

func (q *Queries) CreateUserCourseEnrollment(ctx context.Context, arg CreateUserCourseEnrollmentParams) error {
	_, err := q.exec(ctx, q.createUserCourseEnrollmentStmt, createUserCourseEnrollment, arg.User, arg.Course)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, display_name FROM "users" WHERE "id" = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.DisplayName)
	return i, err
}
